{"version":3,"sources":["../src/helpers.js"],"names":[],"mappings":";AACA,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;;AAElB,EAAE,CAAC,OAAO,GAAG;;;;;;;AAOX,SAAO,EAAE,SAAS,OAAO,CAAC,GAAG,EAAE;AAC7B,WAAO,AAAC,OAAO,GAAG,KAAK,WAAW,IAAK,GAAG,KAAK,IAAI,IAAG,GAAG,KAAK,EAAE,IAAI,GAAG,KAAK,CAAC,CAAC;GAC/E;;;;;;;;AAQD,cAAY,EAAE,SAAS,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE;AAC9C,QAAI,IAAI,GAAG,EAAE,CAAC;AACd,SAAK,IAAI,SAAS,IAAI,IAAI,EAAE;AAC1B,UAAI,CAAE,SAAS,CAAE,GAAG,IAAI,CAAE,SAAS,CAAE,CAAC;KACvC;AACD,SAAK,IAAI,SAAS,IAAI,IAAI,EAAE;AAC1B,UAAI,CAAE,SAAS,CAAE,GAAG,IAAI,CAAE,SAAS,CAAE,CAAC;KACvC;AACD,WAAO,IAAI,CAAC;GACb;;;;;;;AAOD,WAAS,EAAE,SAAS,SAAS,CAAC,IAAI,EAAE;AAClC,QAAI,MAAM,GAAG,IAAI,GAAG,GAAG,CAAC;AACxB,QAAI,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACpC,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClC,UAAI,CAAC,GAAG,EAAE,CAAE,CAAC,CAAE,CAAC;AAChB,aAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;AAC1B,SAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;OAC9B;;AAED,UAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAG;AAC7B,eAAO,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;OAC7C;KACF;AACD,WAAO,IAAI,CAAC;GACb;;;;;;;;AAQD,WAAS,EAAE,SAAS,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE;AAC/C,QAAI,OAAO,CAAC;;AAEZ,QAAK,IAAI,EAAG;AACV,UAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;AACtB,UAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,AAAC,CAAC,CAAC;AAC5D,aAAO,GAAG,YAAY,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;KAC7C,MACI;AACH,aAAO,GAAG,EAAE,CAAC;KACd;AACD,YAAQ,CAAC,MAAM,GAAG,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,OAAO,GAAG,UAAU,CAAC;GAC7D;CACF,CAAC","file":"helpers.js","sourcesContent":["/*jshint -W079 */\nvar TW = TW || {};\n\nTW.helpers = {\n  /**\n   * Checks if the given object is empty or not.\n   *\n   * @param obj\n   * @returns {boolean}\n   */\n  isEmpty: function isEmpty(obj) {\n    return (typeof obj === 'undefined') || obj === null ||obj === \"\" || obj === 0;\n  },\n  /**\n   * Merge the attributes of two objects.\n   *\n   * @param obj1\n   * @param obj2\n   * @returns {{}}\n   */\n  mergeObjects: function mergeObjects(obj1, obj2) {\n    var obj3 = {};\n    for (var attrname1 in obj1) {\n      obj3[ attrname1 ] = obj1[ attrname1 ];\n    }\n    for (var attrname2 in obj2) {\n      obj3[ attrname2 ] = obj2[ attrname2 ];\n    }\n    return obj3;\n  },\n  /**\n   * Gets a cookie for the given name.\n   *\n   * @param name\n   * @returns {*}\n   */\n  getCookie: function getCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[ i ];\n      while (c.charAt(0) === ' ') {\n        c = c.substring(1, c.length);\n      }\n\n      if ( c.indexOf(nameEQ) === 0 ) {\n        return c.substring(nameEQ.length, c.length);\n      }\n    }\n    return null;\n  },\n  /**\n   * Sets a cookie to the given name.\n   *\n   * @param name\n   * @param value\n   * @param days\n   */\n  setCookie: function setCookie(name, value, days) {\n    var expires;\n\n    if ( days ) {\n      var date = new Date();\n      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n      expires = \"; expires=\" + date.toGMTString();\n    }\n    else {\n      expires = \"\";\n    }\n    document.cookie = name + \"=\" + value + expires + \"; path=/\";\n  }\n};\n"]}