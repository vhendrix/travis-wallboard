{"version":3,"sources":["../../src/Project/ProjectController.js"],"names":[],"mappings":"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","file":"ProjectController.js","sourcesContent":["angular.module('travisWallBoard.controllers').controller(\n  'ProjectController',\n  [\n    '$scope',\n    'twsettings',\n    'TravisWallboardService',\n    'DisplayFunctions',\n    '$interval',\n    'TravisBuilds',\n    '$routeParams',\n    function (\n      $scope,\n      twsettings,\n      $travisWallboardService,\n      DisplayFunctions,\n      $interval,\n      TravisBuilds,\n      routeParams\n    ) {\n      // Standard interval 1 second (1000 milisecond).\n      var interval = 1000;\n\n      var errors = 0;\n\n      /**\n       * Holds the display funcions from the service.\n       * @todo see if i can call this direcly from the view one way or the other.\n       * @type DisplayFunctions\n       */\n      $scope.displayFunctions = DisplayFunctions;\n      /**\n       * Holds all active repositories the user has available in Travis.\n       *\n       * @type {Object}\n       */\n      $scope.repos = {};\n\n      /**\n       * Holds the last builds per repo.\n       *\n       * @type {Object}\n       */\n      $scope.builds = {};\n\n      $scope.errorScreen = false;\n\n      /**\n       * Handle errors to be able to show error screen.\n       */\n      $scope.handleErrors = function() {\n\n        if (typeof errors === \"undefined\" ) {\n          errors = 0;\n          $scope.errorScreen = false;\n        } else {\n          errors += 1;\n        }\n        if (errors > 10) {\n          $scope.errorScreen = true;\n        }\n      };\n\n      $scope.loadBuildsForRepo = function () {\n        var slug = routeParams.slug;\n        var $user = twsettings.data.repos[ routeParams.user + '/' + routeParams.slug ];\n        var timer = $user.polling || 30;\n        if (typeof $user.lastupdate === \"undefined\" || $user.lastupdate >= (timer * interval) ) {\n          $user.lastupdate = 0;\n          $scope.loadBuild($user, slug);\n        } else {\n          $user.lastupdate += interval;\n        }\n      };\n\n      $scope.loadBuild = function($user, slug) {\n        TravisBuilds.resource(\n            $user.name,\n            twsettings.data.getUri($user),\n            $user.isPrivate,\n            $user.token\n        ).getBuildsForProject(\n            {slug: slug}, function (response) {\n              $scope.builds = response.builds;\n            },\n            $scope.handleErrors\n        );\n      };\n\n      if ( twsettings.data.repos[ routeParams.user + '/' + routeParams.slug ] ) {\n        $scope.loadBuildsForRepo();\n      }\n\n      var initialBuildRepoTimer = $interval(\n        function() {\n          if ( twsettings.data.repos[ routeParams.user + '/' + routeParams.slug ] ) {\n            $scope.loadBuildsForRepo();\n            $interval.cancel(initialBuildRepoTimer);\n          }\n        },\n        2000\n      );\n\n      var buildRepoTimer = $interval(\n        $scope.loadBuildsForRepo, interval\n      );\n\n      $scope.$on(\n        '$destroy', function () {\n          $interval.cancel(buildRepoTimer);\n        }\n      );\n    }\n  ]\n);\n"]}