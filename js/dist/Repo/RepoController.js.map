{"version":3,"sources":["../../src/Repo/RepoController.js"],"names":[],"mappings":"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","file":"RepoController.js","sourcesContent":["/**\n * travisWallBoard,controller App\n *\n * Contains the controllers we need to get our data and send it to the views.\n */\nangular.module('travisWallBoard.controllers').controller(\n    'ReposController',\n    [\n        '$scope',\n        'twsettings',\n        'TravisWallboardService',\n        'DisplayFunctions',\n        '$interval',\n        'TravisRepos',\n        'TravisBuilds',\n        '$routeParams',\n        function ($scope,\n                  twsettings,\n                  $travisWallboardService,\n                  DisplayFunctions,\n                  $interval,\n                  TravisRepos,\n                  TravisBuilds,\n                  routeParams) {\n            // Number of errors counted.\n            var errors = 0;\n\n            var helper = new Helper();\n\n            // Standard interval 1 second (1000 milisecond).\n            var interval = 1000;\n            if (angular.isDefined(routeParams.repo)) {\n                twsettings.data.setUsers([{isPrivate: 'NO', name: routeParams.repo}]);\n            }\n\n            /**\n             * Holds the display functions from the service.\n             * @todo see if i can call this directly from the view one way or the other.\n             * @type DisplayFunctions\n             */\n            $scope.displayFunctions = DisplayFunctions;\n            /**\n             * Holds all active repositories the user has available in Travis.\n             *\n             * @type {Object}\n             */\n            $scope.repos = {};\n\n            /**\n             * Hold repos that have been (re) queued after the repo has\n             * a state change.\n             *\n             * @type {Object}\n             */\n            $scope.pendingRepos = {};\n            /**\n             * Holds the last builds per repo.\n             *\n             * @type {Object}\n             */\n            $scope.builds = {};\n\n            // Should the error screen be shown.\n            $scope.errorScreen = false;\n\n            /**\n             * Loads the builds for the given repos\n             *\n             * @param {Object} $repos Object with all repos.\n             */\n            $scope.loadBuilds = function ($repos, $user) {\n                angular.forEach(\n                    $repos, function (repo) {\n                        $scope.loadBuildsForRepo(repo, $user, true);\n                    }\n                );\n            };\n\n            /**\n             * Check if the crepo that was updates also gets new build data.\n             * If not queue it in the pendingRepos var so next run we can check it again.\n             *\n             * @param newbuild\n             * @param $repoid\n             */\n            $scope.checkUpdateFinished = function (newbuild, $repoid, $repo) {\n                if (typeof $scope.builds[$repo.id] !== \"undefined\") {\n                    if (\n                        typeof(newbuild.state) !== \"undefined\" &&\n                        newbuild.state == $scope.builds[$repoid].state &&\n                        newbuild.started_at === $scope.builds[$repoid].started_at &&\n                        newbuild.finished_at === $scope.builds[$repoid].finished_at) {\n\n                        $scope.pendingRepos[$repoid] = $repo\n                    } else if (typeof($scope.pendingRepos[$repoid]) !== \"undefined\") {\n                        $scope.pendingRepos[$repoid] = null;\n                        delete $scope.pendingRepos[$repoid];\n                    }\n                }\n            };\n\n            /**\n             * Loads builds for a given repository and sets this to the scope.\n             *\n             * @param {Object} $repo\n             */\n            $scope.loadBuildsForRepo = function ($repo, $user, $first) {\n                var slug = $repo.slug.replace($user.name + '/', \"\");\n                TravisBuilds.resource($user.name, twsettings.data.getUri($user), $user.isPrivate, $user.token).getBuilds(\n                    {slug: slug}, function ($response) {\n\n                        if(typeof($response.builds) !== 'undefined' && typeof($response.builds[0]) !== 'undefined') {\n                            var newbuild = $response.builds[0];\n                            newbuild.name = slug;\n\n                            if ($first !== true) {\n                                $scope.checkUpdateFinished(newbuild, $repo.id, $repo);\n                            }\n\n                            $scope.builds[$repo.id] = newbuild;\n                            errors = 0;\n                        }\n                    },\n                    $scope.handleErrors\n                );\n            };\n\n            /**\n             * Load initial repos from the travis service.\n             */\n            $scope.loadRepos = function () {\n                angular.forEach(\n                    twsettings.data.users,\n                    function ($user) {\n                        if (!helper.isEmpty($user.name)) {\n                            var resource = TravisRepos.resource($user.name, twsettings.data.getUri($user), $user.isPrivate, $user.token);\n                            resource.getRepos(\n                                function (response) {\n                                    errors = 0;\n                                    var newRepos = $travisWallboardService.getReposFromResponse(response, $user);\n                                    $scope.repos = helper.mergeObjects($scope.repos, newRepos);\n                                    $scope.loadBuilds(newRepos, $user);\n                                },\n                                $scope.handleErrors\n                            );\n                        }\n                    }\n                );\n            };\n\n            /**\n             * Poll the repos to see if there are any changes.\n             */\n            $scope.pollRepos = function () {\n                angular.forEach(\n                    twsettings.data.users,\n                    function ($user) {\n                        var timer = $user.polling || 30;\n                        if (typeof $user.lastupdate === \"undefined\" || $user.lastupdate >= (timer * interval)) {\n                            $user.lastupdate = 0;\n                            $scope.loadRepo($user);\n                        } else {\n                            $user.lastupdate += interval;\n                        }\n\n                    }\n                );\n            };\n\n            $scope.loadRepo = function ($user) {\n                TravisRepos.resource($user.name, twsettings.data.getUri($user), $user.isPrivate, $user.token).getRepos(\n                    function (response) {\n                        errors = 0;\n                        $scope.errorScreen = false;\n                        var $updatedRepos = $travisWallboardService.getUpdatedReposFromResponse($scope.repos, response);\n\n                        angular.forEach(\n                            $updatedRepos, function ($repo) {\n                                $scope.loadBuildsForRepo($repo, $user, false);\n                            }\n                        );\n\n                        angular.forEach(\n                            $scope.pendingRepos,\n                            function ($repo) {\n                                $scope.loadBuildsForRepo($repo, $user, false);\n                            }\n                        );\n                    },\n                    $scope.handleErrors\n                );\n            };\n\n            /**\n             * Handle errors to be able to show error screen.\n             */\n            $scope.handleErrors = function () {\n\n                if (typeof errors === \"undefined\") {\n                    errors = 0;\n                    $scope.errorScreen = false;\n                } else {\n                    errors += 1;\n                }\n                if (errors > 10) {\n                    $scope.errorScreen = true;\n                }\n            };\n\n            $scope.loadRepos();\n\n            //Start a interval timer to keep\n            var pollTimer = $interval(\n                $scope.pollRepos, interval\n            );\n\n            // When the controller gets destroyed also remove the timer otherwise we will\n            // keep spamming the api.\n            $scope.$on(\n                '$destroy', function () {\n                    $interval.cancel(pollTimer);\n                }\n            );\n        }\n    ]\n);\n"]}