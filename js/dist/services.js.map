{"version":3,"sources":["../src/services.js"],"names":[],"mappings":"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","file":"services.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('travisWallBoard.services', [])\n        .service(\n        'TravisWallboardService',\n        [\n            'twsettings',\n            function (twsettings) {\n\n                var $building = {};\n\n                var getBuildData = function ($name, $commit, $build) {\n                    var $buildData = {};\n                    $buildData.name = $name;\n\n                    if (typeof($build) === \"undefined\") {\n                        return $buildData;\n                    }\n\n                    if (typeof($build.state) !== 'undefined') {\n                        $buildData.state = $build.state;\n                    } else {\n                        $build.state = 'passed';\n                    }\n                    $buildData.finished_at = $build.finished_at;\n                    $buildData.started_at = $build.started_at;\n                    $buildData.is_pr = $build.pull_request;\n\n                    if ($build.pull_request) {\n                        $buildData.branch = $build.pull_request_title;\n                    } else {\n                        $buildData.branch = $commit.branch;\n                    }\n\n                    $buildData.commit_message = $commit.message;\n                    $buildData.committer_name = $commit.committer_name;\n                    $buildData.committer_email = $commit.committer_email;\n\n                    return $buildData;\n                };\n                /**\n                 * Will parse the response and return active repositories from\n                 * travis.\n                 *\n                 * @param $response\n                 * @returns {{}}\n                 */\n                this.getReposFromResponse = function ($response, $user) {\n                    var $repos = {};\n                    var projects = twsettings.data.projects;\n                    angular.forEach(\n                        $response.repos, function ($repo) {\n                            var name = $user.name;\n                            if ($user.isPrivate) {\n                                name += ' private';\n                            }\n\n                            if ($repo.active && (typeof projects[name] === \"undefined\" || typeof projects[name][$repo.id] === 'undefined' || projects[name][$repo.id].enabled === \"YES\" )) {\n                                $repos[$repo.id] = $repo;\n                            }\n                        }\n                    );\n\n                    return $repos;\n                };\n\n                this.getProjectsFromResponse = function ($response) {\n                    var $repos = {};\n\n                    angular.forEach(\n                        $response.repos, function ($repo) {\n                            if ($repo.active) {\n                                $repos[$repo.id] = $repos[$repo.id] || {};\n                                $repos[$repo.id].name = $repo.slug;\n                                $repos[$repo.id].enabled = 'YES';\n                            }\n                        }\n                    );\n\n                    return $repos;\n                };\n\n                /**\n                 * Will parse the response and return active repositories from\n                 * travis.\n                 *\n                 * @param $response\n                 * @returns {{}}\n                 */\n                this.getReposForUsersFromResponse = function ($response, $user) {\n                    var $repos = {};\n\n                    var projects = twsettings.data.projects;\n\n                    angular.forEach(\n                        $response.repos, function ($repo) {\n                            var name = $user.name;\n                            if ($user.isPrivate) {\n                                name += ' private';\n                            }\n\n                            if ($repo.active && (typeof projects[name] === \"undefined\" || typeof projects[name][$repo.id] === 'undefined' || projects[name][$repo.id] === \"YES\" )) {\n                                $repos[$repo.slug] = $user;\n                            }\n                        }\n                    );\n\n                    return $repos;\n                };\n\n                /**\n                 * Get all repositories that have a changed state compared to the previous\n                 * check.\n                 *\n                 * @param $repos\n                 * @param $response\n                 * @returns {{}}\n                 */\n                this.getUpdatedReposFromResponse = function ($repos, $response) {\n                    var $updatedRepos = {};\n\n                    angular.forEach(\n                        $response.repos, function ($repo) {\n                            if (typeof $building[$repo.id] === \"undefined\") {\n                                $building[$repo.id] = 'done';\n                            }\n\n                            if ($repo.active && $repo.last_build_finished_at == null && $building[$repo.id] !== 'building') {\n                                $building[$repo.id] = 'building';\n                                $updatedRepos [$repo.id] = $repo;\n                            } else if ($repo.active && $repo.last_build_finished_at !== null && $building[$repo.id] === 'building') {\n                                $building[$repo.id] = 'done';\n                                $updatedRepos [$repo.id] = $repo;\n                            }\n                        }\n                    );\n\n                    return $updatedRepos;\n                };\n\n                /**\n                 * Parses the builds returned from the service.\n                 *\n                 * @param {String} $slug The slug of the project (project name on git)\n                 * @param {int} $repoId Id of the repositiory.\n                 * @param {Object} $response Response we got from the service.\n                 * @returns {{}}\n                 */\n                this.getBuildsForRepo = function ($slug, $repoId, $response) {\n                    var $latestBuild = $response.builds[0];\n                    var $latestCommit = $response.commits[0];\n\n                    return getBuildData($slug, $latestCommit, $latestBuild);\n                };\n\n                /**\n                 * Parses the builds returned from the service for the project view.\n                 *\n                 * @param {String} $slug The slug of the project (project name on git)\n                 * @param {int} $repoId Id of the repositiory.\n                 * @param {Object} $response Response we got from the service.\n                 * @returns {{}}\n                 */\n                this.getBuildsForProject = function ($slug, $response) {\n                    var $builds = {};\n\n                    angular.forEach(\n                        $response.builds, function (build, key) {\n                            var $data = getBuildData($slug, $response.commits[key], build);\n                            if (typeof  $builds[$data.branch] === \"undefined\") {\n                                $builds[$data.branch] = $data;\n                            }\n                        }\n                    );\n\n                    return $builds;\n                };\n            }\n        ]\n    ).factory(\n        'DisplayFunctions', function () {\n            return {\n                isFailed: function (state) {\n                    return state === 'failed' || state === 'error' || state === 'errored';\n                },\n                getErrorsClass: function (builds) {\n                    var count = 0;\n                    angular.forEach(\n                        builds, function (build) {\n                            if (build.state === 'failed' || build.state === 'error' || build.state === 'errored') {\n                                var dt = new Date(Date.parse(build.finished_at));\n                                var now = new Date();\n\n                                var diff = now.getTime() - dt.getTime();\n\n                                var minutes = Math.floor((diff / (60000)));\n                                if (minutes < 5) {\n                                    count++;\n                                }\n                            }\n                        }\n                    );\n\n                    if (count > 3) {\n                        return 'col-md-6 errors-' + count;\n                    } else {\n                        return 'col-md-12 errors-' + count;\n                    }\n                },\n\n                showModal: function (builds) {\n                    var failed = false;\n                    angular.forEach(\n                        builds, function (build) {\n                            if (build.state === 'failed' || build.state === 'error' || build.state === 'errored') {\n                                var dt = new Date(Date.parse(build.finishedAt));\n                                var now = new Date();\n\n                                var diff = now.getTime() - dt.getTime();\n\n                                var minutes = Math.floor((diff / (60000)));\n                                if (minutes < 5) {\n                                    failed = true;\n                                    return true;\n                                }\n                            }\n                        }\n                    );\n                    return failed;\n                },\n\n                recentError: function (finishedAt) {\n                    var dt = new Date(Date.parse(finishedAt));\n                    var now = new Date();\n\n                    var diff = now.getTime() - dt.getTime();\n\n                    var minutes = Math.floor((diff / (60000)));\n\n                    if (minutes < 5) {\n                        return true;\n                    }\n                    return false;\n                },\n\n                isBuilding: function (state) {\n                    return state === 'started' || state === 'created' || state === 'received';\n                },\n\n                isPassing: function (state) {\n                    return state === 'passed' || state === 'canceled';\n                }\n            };\n        }\n    )\n        .value('version', '0.1');\n})\n();\n"]}